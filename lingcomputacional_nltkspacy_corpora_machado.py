# -*- coding: utf-8 -*-
"""LingComputacional_NLTKSPACY_corpora_machado

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DfoH-1oKin-f2pHvXmbPLZqPypPC1XZ3

#PROPOSTA DE PROJETO: 

Comparar a presença de advérbiação em romances e crônicas do corpus MACHADO do NLTK, fazer identificação de entidades nomeadas (NER) e TF-IDF para medir a relevância de um termo em um conjunto de documentos
"""

import statistics as stat

import nltk
nltk.download('all')

import re
nltk.download('stopwords')

from nltk.probability import FreqDist
from nltk.tokenize import word_tokenize
nltk.download('punkt')

from nltk.corpus import machado

from nltk.text import Text

import spacy

import matplotlib.pyplot as plt

#print(machado.readme())

!python -m spacy download pt_core_news_sm

nlp = spacy.load('pt_core_news_sm')

"""#Análise livro: DOM CASMURRO"""

dom_casmurro = nltk.corpus.machado.raw('romance/marm08.txt') #ler OBRA DOM CASMURRO
type(dom_casmurro)

"""#Pré-processamento do texto:limpeza do corpus com NLTK"""

# seleciona apenas letras e coloca todas em minúsculo 
letras_min =  re.findall(r'\b[A-zÀ-úü]+\b', dom_casmurro.lower())

# remove stopwords
stopwords = nltk.corpus.stopwords.words('portuguese')
stop = set(stopwords)
sem_stopwords = [palavra for palavra in letras_min if palavra not in stop]

# juntando os tokens novamente em formato de texto
livro_limpo = " ".join(sem_stopwords)
livro_limpo

# tokenizando 
token_livro = word_tokenize(livro_limpo)

# contagem de frequencia
frequencia_palavra = FreqDist(token_livro)
print("20 palavras mais frequentes:")
print(frequencia_palavra.most_common(20))

# plotagem do gráfico de frequencia 
plt.figure(figsize = (10, 8))
frequencia_palavra.plot(20, title = "Frequência de Palavras")

"""#Concordânciador simples"""

domcasmurro_text = Text(livro_limpo.split())

domcasmurro_text.concordance('capitu')

"""#Similaridade



"""

#temos uma lista de palavras que tendem a ocorrer no mesmo contexto - Nesse caso, o contexto são apenas as palavras que ocorrem frequentemente de qualquer lado da palavra.
 domcasmurro_text.similar('capitu')

"""#Bigramas
Um bigrama ou digrama é uma sequência de dois elementos adjacentes de uma sequência de tokens, que normalmente são letras, sílabas ou palavras. 

São palavras no texto que possuem um sentido único estando juntas, podendo até ocorrer separadas, mas com um sentido quando juntas.
"""

domcasmurro_text.collocations() #PAG 151 Foundations of Statistical Natural Language Processing Autores Manning and Schutze

#analisar a ocorrência das palavras ao longo de todo o texto - posição da lista em que a palavra aparece
plt.figure(figsize=(15, 10))
domcasmurro_text.dispersion_plot(['capitu','olhos', 'ezequiel', 'escobar', 'bentinho', 'dom', 'casmurro'])

"""#COMPARANDO COM OUTRA COMPORA DO MESMO AUTOR

#Pos-tagging: 
etiquetagem morfossintática de cada palavra desse corpora
"""

obras = []
for i in range(1,6): #bloco é executado 5 vezes
  obras.append('romance/marm0' + str(i) + '.txt')

for i in range(1,6):
  obras.append('cronica/macr0' + str(i) + '.txt')


cont_adv = [] #cont_adv recebe as porcentagens de adv em comparação com todas as etiquetas do texto
for obra in obras:
  print(obra) #print para saber qual obra está sendo processada
  ler_machado = machado.raw(obra)
  doc = nlp(ler_machado)
  etiq = [ (pal.orth_, pal.pos_) for pal in doc]
  adv = [(ort, pos) for (ort, pos) in etiq if pos == 'ADV']
  cont_adv.append(len(adv)/ len(etiq)) #porcentagens de adv

romance_m = stat.mean(cont_adv[:4]) #média_romances
romance_dp = stat.stdev(cont_adv[:4]) #desvio-padrão_romances
cronica_m = stat.mean(cont_adv[5:]) #média_cronicas
cronica_dp = stat.stdev(cont_adv[5:]) #desvio-padrão_cronicas

"""#Gráficos
biblioteca: matplotlib.pyplot - estatistica descritiva

###Gráfico de barras simples
"""

tipo_obra = ('romance','cronica')
x = [0,1]
y = [romance_m, cronica_m]
dp = [romance_dp, cronica_dp]
plt.bar (x, y, yerr = dp) # bar = barra
plt.xticks(x, tipo_obra)
plt.ylabel('média de adv (%)')
plt.title('adv media nas obras')

plt.show()

"""Os dados indicam que Machado de Assis tende a usar mais adv em romances do que crônicas.

#Limpeza do corpus
"""

lixo = ['PUNCT', 'SPACE', 'X', 'SYM', 'NUM']
pos_tag2 = [pos for (pal, pos) in etiq if pos not in lixo] #lista limpa

"""#Dicionário de ocorrência"""

from nltk.sem.relextract import defaultdict
cont = defaultdict(int)
for palavra in pos_tag2:
  cont[palavra] += 1

nomes = cont.keys() #chave do dicionário
ocorrencias = cont.values() #valores do dicionário

"""#Identificar entidades nomeadas(NER) - com spacy"""

!pip install spacy --upgrade

for entidades in doc.ents:
  print(entidades.text, entidades.label_)

from spacy import displacy
displacy.render(doc, style = 'ent', jupyter =  True)

for entidades in doc.ents:
  if entidades.label_ == "LOC":
    print(entidades.text)